{"remainingRequest":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\src\\views\\oj\\index\\problem\\ProblemList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\src\\views\\oj\\index\\problem\\ProblemList.vue","mtime":1549886938034},{"path":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\wu1ji\\Documents\\Mo\\Projects\\Java\\OnlineJudge\\VuePageV2\\vue-page-v2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'ProblemList',\n  data() {\n    return {\n      current: 1,\n      totalPage: 1,\n      per_page: 10,\n      loading: false,\n      tableData1: this.mockTableData1(),\n      tableColumns1: [\n        {\n          title: 'title',\n          key: 'title',\n          width: 600,\n          render: (h, params) => {\n            return h('router-link', {\n              style: {\n                fontSize: '15px'\n              },\n              attrs: {\n                to: \"/problem/\" + params.row.problem_id,\n              },\n              on: {\n                click: () => {\n                \n                }\n              },\n            }, params.row.title);\n          }\n        },\n        //todo level\n        /*{\n        \n        },*/\n        {\n          title: 'Total',\n          key: 'submit',\n        },\n        {\n          title: 'AC Rate',\n          key: 'ac_rate',\n          render: (h, params) => {\n            return h('Poptip', {\n              props: {\n                trigger: 'hover',\n                title: 'AC Rate',\n                placement: 'bottom'\n              }\n            }, [\n              h('Tag', (params.row.accepted / (params.row.submit === 0 ? 1 : params.row.submit)) * 100 + \"%\"),\n              h('div', {slot: 'content'}, [\n                h('p', {\n                  style: {\n                    fontSize: '15px'\n                  }\n                }, \"AC:\" + params.row.accepted),\n                h('p', {\n                  style: {\n                    fontSize: '15px'\n                  }\n                }, \"Total:\" + params.row.submit),\n              ]),\n            ]);\n          }\n        }\n      ]\n    }\n  },\n  methods: {\n    mockTableData1() {\n      let problems = [];\n      var params = new URLSearchParams();\n      params.append(\"page\", this.current);\n      params.append(\"per_page\", this.per_page);\n      params.append(\"resType\", \"simple\");//需求结果类型\n      this.$axios({\n        url: \"/api/api-oj/problems/defunct/1\",\n        method: 'get',\n        data: params,\n      }).then(res => {\n        var result = res.data;\n        console.log(result);\n        if (result.code === 200) {\n          for (let i = 0; i < result.data.total; i++) {\n            var item = result.data.results[i];\n            problems.push({\n              accepted: item.accepted,\n              click: item.click,\n              create_time: item.create_time,\n              defunct: item.defunct,\n              description: item.description,\n              hint: item.hint,\n              input: item.input,\n              memory_limit: item.memory_limit,\n              output: item.output,\n              problem_id: item.problem_id,\n              sample_input: item.sample_input,\n              sample_output: item.sample_output,\n              source: item.source,\n              submit: item.submit,\n              time_limit: item.time_limit,\n              title: item.title,\n              user_id: item.user_id\n            });\n          }\n        } else {\n          console.log('Failed! ' + result.message);\n        }\n      }).catch(err => {\n        console.log('An error has occurred! ' + err);\n      });\n      console.log(problems);\n      return problems;\n    },\n    \n    formatDate(date) {\n      const y = date.getFullYear();\n      let m = date.getMonth() + 1;\n      m = m < 10 ? '0' + m : m;\n      let d = date.getDate();\n      d = d < 10 ? ('0' + d) : d;\n      return y + '-' + m + '-' + d;\n    },\n    \n    changePage() {\n      // The simulated data is changed directly here, and the actual usage scenario should fetch the data from the server\n      this.tableData1 = this.mockTableData1();\n    }\n  },\n  created() {\n    this.current = 1;\n    //ajax\n    this.totalPage = 1;\n  }\n}\n",{"version":3,"sources":["ProblemList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ProblemList.vue","sourceRoot":"src/views/oj/index/problem","sourcesContent":["<template>\n  <div class=\"card-content\">\n    <Row>\n      <Col span=\"18\" style=\"margin-right: 10px\">\n        <Card :bordered=\"false\">\n          <p class=\"card-title\">Problem List</p>\n          <Button slot=\"extra\" style=\"margin-right: 60px\" :loading=\"loading\" @click.native=\"refresh\">ReSet</Button>\n          <Table :data=\"tableData1\" :columns=\"tableColumns1\" stripe></Table>\n          <div style=\"margin:25px 10px 10px 10px;overflow: hidden\">\n            <div style=\"float: right;\">\n              <Page :total=\"totalPage\" :current=\"current\" :page-size=\"per_page\" show-sizer show-elevator @on-change=\"changePage\"></Page>\n            </div>\n          </div>\n        </Card>\n      \n      </Col>\n      <Col span=\"5\">\n        <Card :bordered=\"false\">\n          <p slot=\"title\">Borderless card</p>\n          <p>Content of card</p>\n          <p>Content of card</p>\n          <p>Content of card</p>\n          <Button long ghost type=\"info\" @click.native=\"\" style=\"margin-top: 15px\">Pick One</Button>\n        </Card>\n      </Col>\n    </Row>\n  \n  </div>\n</template>\n<script>\n  export default {\n    name: 'ProblemList',\n    data() {\n      return {\n        current: 1,\n        totalPage: 1,\n        per_page: 10,\n        loading: false,\n        tableData1: this.mockTableData1(),\n        tableColumns1: [\n          {\n            title: 'title',\n            key: 'title',\n            width: 600,\n            render: (h, params) => {\n              return h('router-link', {\n                style: {\n                  fontSize: '15px'\n                },\n                attrs: {\n                  to: \"/problem/\" + params.row.problem_id,\n                },\n                on: {\n                  click: () => {\n                  \n                  }\n                },\n              }, params.row.title);\n            }\n          },\n          //todo level\n          /*{\n          \n          },*/\n          {\n            title: 'Total',\n            key: 'submit',\n          },\n          {\n            title: 'AC Rate',\n            key: 'ac_rate',\n            render: (h, params) => {\n              return h('Poptip', {\n                props: {\n                  trigger: 'hover',\n                  title: 'AC Rate',\n                  placement: 'bottom'\n                }\n              }, [\n                h('Tag', (params.row.accepted / (params.row.submit === 0 ? 1 : params.row.submit)) * 100 + \"%\"),\n                h('div', {slot: 'content'}, [\n                  h('p', {\n                    style: {\n                      fontSize: '15px'\n                    }\n                  }, \"AC:\" + params.row.accepted),\n                  h('p', {\n                    style: {\n                      fontSize: '15px'\n                    }\n                  }, \"Total:\" + params.row.submit),\n                ]),\n              ]);\n            }\n          }\n        ]\n      }\n    },\n    methods: {\n      mockTableData1() {\n        let problems = [];\n        var params = new URLSearchParams();\n        params.append(\"page\", this.current);\n        params.append(\"per_page\", this.per_page);\n        params.append(\"resType\", \"simple\");//需求结果类型\n        this.$axios({\n          url: \"/api/api-oj/problems/defunct/1\",\n          method: 'get',\n          data: params,\n        }).then(res => {\n          var result = res.data;\n          console.log(result);\n          if (result.code === 200) {\n            for (let i = 0; i < result.data.total; i++) {\n              var item = result.data.results[i];\n              problems.push({\n                accepted: item.accepted,\n                click: item.click,\n                create_time: item.create_time,\n                defunct: item.defunct,\n                description: item.description,\n                hint: item.hint,\n                input: item.input,\n                memory_limit: item.memory_limit,\n                output: item.output,\n                problem_id: item.problem_id,\n                sample_input: item.sample_input,\n                sample_output: item.sample_output,\n                source: item.source,\n                submit: item.submit,\n                time_limit: item.time_limit,\n                title: item.title,\n                user_id: item.user_id\n              });\n            }\n          } else {\n            console.log('Failed! ' + result.message);\n          }\n        }).catch(err => {\n          console.log('An error has occurred! ' + err);\n        });\n        console.log(problems);\n        return problems;\n      },\n      \n      formatDate(date) {\n        const y = date.getFullYear();\n        let m = date.getMonth() + 1;\n        m = m < 10 ? '0' + m : m;\n        let d = date.getDate();\n        d = d < 10 ? ('0' + d) : d;\n        return y + '-' + m + '-' + d;\n      },\n      \n      changePage() {\n        // The simulated data is changed directly here, and the actual usage scenario should fetch the data from the server\n        this.tableData1 = this.mockTableData1();\n      }\n    },\n    created() {\n      this.current = 1;\n      //ajax\n      this.totalPage = 1;\n    }\n  }\n</script>\n<style>\n  .card-content {\n    margin: 20px 0 0 50px;\n  }\n  \n  p.card-title {\n    text-align: left;\n    font-size: 30px;\n    margin: 0 0 25px 20px;\n    height: 35px;\n  }\n</style>\n\n"]}]}